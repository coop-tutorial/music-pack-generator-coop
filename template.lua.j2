-- name: \\#{{randomColor1}}\\owokitty \\#{{randomColor2}}\\Generated \\#{{randomColor3}}\\Music \\#{{randomColor4}}\\Pack
-- description: Generated from Playlist URL:\n{{playlistUrl}}\n\nMusic player Lua code by TO0nITor, crabbyease, Farris, 6b
local bgms = {
{% for track in tracks %}
    [{{track["levelNum"]}}] = {audio='{{track["name"]}}', loopEnd = 90.0, loopStart = 0.0, volume = 0.8, name="{{track["name"]}}"},
{% endfor %}
}

-----------------------------------------------------------------------------
--                                Music Player                             --
-----------------------------------------------------------------------------
--Feel free to turn this off if (you don't want to show the music name in the pause menu
local pauseMenuShouldShowMusic = true
local pauseMenuMusicRGBA = {200,200,200,255}

--Don't know what course ID to put for a map? No worries. Just turn this to true, and the pause menu will show the course number in the corner.
--This requires pauseMenuShouldShowMusic to be true to show up.
local pauseMenuShowLevelID = false

--Below here is just a bunch of internal stuff.
--Feel free to copy/paste/alter it as you like in your own works. I'd like to ask for credit in the form of a lua comment, but I'm not a stickler about it.
--Apologies if any of the code is ugly. I have little lua experience compared to some other languages.
local curMap = -1
local audioMainPaused = false
local audioMain = nil --Used for the main audio
local audioSpecial = nil --Used for things like cap music
local audioCurSeq = nil
gGlobalSyncTable.playingRequest = nil

function printAlbum()
    tracklist = {}
    count = 0
    for _, track in pairs(bgms) do
        count = count + 1

        tracklist[count] = track.name
    end
    table.sort(tracklist)
    for _, track in ipairs(tracklist) do
        djui_chat_message_create(track)
    end
end

function stop()
    gGlobalSyncTable.playingRequest = nil
end

function play(request)
    simLevelNum = searchTracks(request)
    if (simLevelNum == nil) then
        djui_chat_message_create("[Music Player] Couldn't find " .. request)
        return
    end
    djui_chat_message_create("[Music Player] Playing " .. bgms[simLevelNum].name)
    gGlobalSyncTable.playingRequest = simLevelNum
end

function searchTracks(keyword)
    for levelNum, track in pairs(bgms) do
        if string.find(track.name, keyword) then
            return levelNum
        end
    end
    return nil
end

function handleMusic()
	------------------------------------------------------
    --          Handle stopping/starting of music       --
	------------------------------------------------------
	--Handle main course music
    if ((gGlobalSyncTable.playingRequest ~= nil and curMap ~= gGlobalSyncTable.playingRequest) or
	    (gGlobalSyncTable.playingRequest == nil and curMap ~= gNetworkPlayers[0].currLevelNum) and
		 gMarioStates[0].area.macroObjects ~= nil) then
        if (gGlobalSyncTable.playingRequest ~= nil) then
            curMap = gGlobalSyncTable.playingRequest
        else
            curMap = gNetworkPlayers[0].currLevelNum
        end
		audioCurSeq = get_current_background_music()
        if (audioMain ~= nil) then
            audio_stream_stop(audioMain)
            audio_stream_destroy(audioMain)
            audioMain = nil
        end
        if (bgms[curMap] ~= nil and bgms[curMap].audio ~= nil) then 
            set_background_music(0,0,0)
            audioMain = audio_stream_load(bgms[curMap].audio)
            if (audioMain ~= nil) then
                audio_stream_set_looping(audioMain, true)
                audio_stream_play(audioMain, true, bgms[curMap].volume);
                print("Playing new audio " .. bgms[curMap].name)
            else
                djui_popup_create('Missing audio!: ' .. bgms[curMap].audio, 10)
                print("Attempted to load filed audio file, but couldn't find it on the system: " .. bgms[curMap].audio)
            end
        else
            print("No audio for this map, so not stopping default: " .. curMap)
        end
    end

	--Handle cap music
	if (gMarioStates[0].capTimer > 0 and bgms[-2] ~= nil) then
		gGlobalSyncTable.playingRequest = nil
		--Handle pausing main streamed music, if applicable.
		if (audioMain ~= nil and audioMainPaused == false) then
			audioMainPaused = true
			audio_stream_pause(audioMain)
		end
		--Start up cap music if it's defined.
		if (audioSpecial == nil) then
            set_background_music(0,0,0)
			stop_cap_music()
			audioSpecial = audio_stream_load(bgms[-2].audio)
			if (audioSpecial ~= nil) then
				audio_stream_set_looping(audioSpecial, true)
				audio_stream_play(audioSpecial, true, bgms[-2].volume)
				print("Playing cap audio " .. bgms[-2].name)
			else
				djui_popup_create('Missing audio!: ' .. bgms[-2].audio, 3)
                print("Attempted to load filed audio file, but couldn't find it on the system: " .. bgms[-2].audio)
			end
		end	
	else
		if (audioSpecial ~= nil) then
			gGlobalSyncTable.playingRequest = nil
			audio_stream_stop(audioSpecial)
			audio_stream_destroy(audioSpecial)
			audioSpecial = nil
			if (audioMain ~= nil and audioMainPaused == true) then
				audioMainPaused = false
				audio_stream_play(audioMain, false, bgms[curMap].volume)
			else
				set_background_music(0, audioCurSeq, 10) 
			end
		end
	end

	------------------------------------------------------
    --                Handle music looping              --
	------------------------------------------------------
    if (audioMain ~= nil) then 
		local curPosition = audio_stream_get_position(audioMain)
		if (curPosition >= bgms[curMap].loopEnd ) then
			gGlobalSyncTable.playingRequest = nil
			local minus = bgms[curMap].loopStart - bgms[curMap].loopEnd
			audio_stream_set_position(audioMain, curPosition - math.abs(minus))
		end
    end
	if (audioSpecial ~= nil) then
		local curPosition = audio_stream_get_position(audioSpecial)
		if (curPosition >= bgms[-2].loopEnd) then
			gGlobalSyncTable.playingRequest = nil
			local minus = bgms[-2].loopStart - bgms[-2].loopEnd
			audio_stream_set_position(audioSpecial, curPosition - math.abs(minus))
		end
	end
end

	--- @param m MarioState
function on_sit_action(m)
	if m.playerIndex == 0 then 
		if (m.action == ACT_DISAPPEARED or m.action == ACT_STAR_DANCE_EXIT or m.action == ACT_STAR_DANCE_NO_EXIT or m.action == ACT_STAR_DANCE_WATER) and (audioMain ~= nil and audioMainPaused == false) then
            audioMainPaused = true
            audio_stream_pause(audioMain)
		else
			if (audioMain ~= nil and audioMainPaused == true) then
				audioMainPaused = false
				audio_stream_play(audioMain, false, bgms[curMap].volume)
			end
		end
	end
end

function hud_render()
    if (pauseMenuShouldShowMusic == true and is_game_paused()) then
        djui_hud_set_resolution(RESOLUTION_DJUI);
        djui_hud_set_font(FONT_NORMAL);
        local screenWidth = djui_hud_get_screen_width()
		local screenHeight = djui_hud_get_screen_height()
        local height = 64
        local y = screenHeight - height
        djui_hud_set_color(pauseMenuMusicRGBA[1], pauseMenuMusicRGBA[2], pauseMenuMusicRGBA[3], pauseMenuMusicRGBA[4]);
		local text = "";
		if (pauseMenuShowLevelID == true) then
			text = "Level ID: " .. gNetworkPlayers[0].currLevelNum
		elseif (audioSpecial ~= nil) then
			text = "Music: " .. bgms[-2].name
		elseif (audioMain ~= nil) then
			text = "Music: " .. bgms[curMap].name
		end
		djui_hud_print_text(text, 5, y, 1);
    end
end

function nomusic()
	for i=0,38,1 do
		stop_background_music(SEQ_LEVEL_INSIDE_CASTLE)
		stop_background_music(SEQ_LEVEL_GRASS)
		stop_background_music(SEQ_EVENT_BOSS)
		stop_background_music(SEQ_EVENT_POWERUP)
		stop_background_music(SEQ_EVENT_METAL_CAP)
		stop_background_music(SEQ_EVENT_RACE)
		stop_background_music(SEQ_LEVEL_SLIDE)
		stop_background_music(SEQ_LEVEL_SNOW)
		stop_background_music(SEQ_LEVEL_KOOPA_ROAD)
		stop_background_music(SEQ_LEVEL_BOSS_KOOPA_FINAL)
		stop_background_music(SEQ_LEVEL_HOT)
		stop_background_music(SEQ_MENU_TITLE_SCREEN)
		stop_background_music(SEQ_LEVEL_SPOOKY)
		stop_background_music(SEQ_LEVEL_WATER)
		stop_background_music(SEQ_LEVEL_BOSS_KOOPA)
		stop_background_music(SEQ_LEVEL_UNDERGROUND)
		stop_background_music(0x53)
		stop_background_music(0x41)
		stop_background_music(0x65)
		stop_background_music(0x66)
		stop_shell_music()
		stop_background_music(0x16)
		stop_background_music(0x24)
		stop_background_music(SEQ_LEVEL_BOSS_KOOPA_FINAL)
		stop_background_music(SEQ_EVENT_CUTSCENE_ENDING)
		stop_background_music(SEQ_EVENT_CUTSCENE_CREDITS)
		stop_background_music(SEQ_EVENT_PEACH_MESSAGE)
		stop_background_music(SEQ_EVENT_CUTSCENE_LAKITU)
		stop_background_music(SEQ_EVENT_CUTSCENE_INTRO)
		stop_background_music(SEQ_EVENT_CUTSCENE_VICTORY)
		stop_background_music(SEQ_MENU_FILE_SELECT)
    end
end

hook_chat_command("stoptrack", "\\#{{randomColor4}}\\ stop currently playing track", stop)
hook_chat_command("playtrack", "\\#{{randomColor1}}\\[partial track name]\\#{{randomColor3}}\\ play track given search term", play)
hook_chat_command("tracklist", "\\#{{randomColor2}}\\ print tracklist", printAlbum)
hook_event(HOOK_ON_HUD_RENDER, hud_render)
hook_event(HOOK_UPDATE, handleMusic)
hook_event(HOOK_UPDATE, nomusic)
hook_event(HOOK_ON_SET_MARIO_ACTION, on_sit_action)
-----------------------------------------------------------------------------
--                           Music Player End                              --
-----------------------------------------------------------------------------